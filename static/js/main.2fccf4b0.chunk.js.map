{"version":3,"sources":["components/Card.js","cardFunctions.js","helperFunctions.js","components/LoadingScreen.js","components/LoseScreen.js","components/CardHolder.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","imgSrc","pokemon","img","id","className","alt","src","getCards","quantity","a","values","getRandNums","pokemonArray","i","getPokemon","newPokemon","push","cardsArray","generateCards","console","log","index","Pokedex","require","P","getPokemonByName","idk","sprites","front_default","length","newCard","createCard","newKey","uniqId","start","maxArray","Array","fill","map","_","idx","j","returnArray","randIndex","Math","floor","random","splice","shuffle","array","randomIndex","currentIndex","removeLoading","document","getElementById","style","display","removeLose","LoadingScreen","type","color","height","width","LoseScreen","best","onClick","CardHolder","useState","setPokemon","clicked","setClicked","level","setLevel","useEffect","then","result","addEventListener","clickedArray","newScore","score","setScore","setBest","checkClicked","newLevel","newClicked","fillFalse","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2fccf4b0.chunk.js","sourcesContent":["import \"./componentStyles.css\";\nimport React from \"react\";\n\n\nconst Card = (props) => {\n\n    let name = null;\n    let imgSrc = null;\n    if (props.pokemon === null) {\n        name = \"\";\n        imgSrc = \"\";\n    }\n    else {\n        name = props.pokemon.name;\n        imgSrc = props.pokemon.img;\n    }\n\n    let newCard = (\n        <div id={props.id} className=\"card\" >\n            <h1 className=\"cardTitle\">{name}</h1>\n            <img className=\"cardImg\" alt=\"your mom\" src={imgSrc} />\n        </div>\n    );\n\n    return newCard;\n    \n}\n\nexport default Card;","import Card from \"./components/Card\";\nimport uniqId from \"uniqid\";\n\n\nexport async function getCards(quantity) {\n    try{\n        let values = getRandNums(quantity);\n        let pokemonArray = [];\n        for (let i = 0; i < quantity; i++) {\n            let newPokemon = await getPokemon(values[i]);\n            pokemonArray.push(newPokemon);\n        }\n        let cardsArray = generateCards(pokemonArray);\n        return cardsArray;     \n    }\n    catch(error) {\n        console.log(error);\n        return null;\n    }\n}\n\nasync function getPokemon(index) {\n    const Pokedex = require(\"pokeapi-js-wrapper\");\n    const P = new Pokedex.Pokedex();\n    try{\n        let pokemon = await P.getPokemonByName(index);\n        let idk = {\n            name: pokemon.name,\n            img: pokemon.sprites.front_default,\n        }\n        return idk;    \n    }\n    catch(error){\n        console.log(error);\n        return null;\n    }\n}\n\nfunction generateCards(pokemonArray) {\n    let cardsArray = [];\n    for (let i = 0; i < pokemonArray.length; i++) {\n        let newCard = createCard(pokemonArray[i], i);\n        cardsArray.push(newCard);\n    }\n    return cardsArray;\n}\n\nfunction createCard(pokemon, i) {\n    let newKey = uniqId();\n    let newCard = <Card pokemon={pokemon} key={newKey} id={i} />;\n    return newCard;\n}\n\nfunction getRandNums(quantity) {\n    let maxArray = [];\n    for (let j of range(1, 898)) {\n        maxArray.push(j);\n    }\n    let returnArray = [];\n    for (let i = 0; i < quantity; i ++) {\n        let randIndex = Math.floor(Math.random() * 898);\n        returnArray.push(...maxArray.splice(randIndex, 1));\n    }\n    return returnArray;\n}\n\nfunction range(start, end) {\n    return Array(end - start + 1).fill().map((_, idx) => start + idx)\n}\n\nexport function shuffle(array) {\n    if (array) {\n        var currentIndex = array.length,  randomIndex;\n    \n        // While there remain elements to shuffle...\n        while (currentIndex !== 0) {\n    \n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n    \n        // And swap it with the current element.\n        [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }        \n    }\n    return array;\n}","export function checkClicked(array) {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] === false) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function fillFalse(array) {\n    for (let i = 0; i < array.length; i++) {\n        array[i] = false;\n    }\n}\n\nexport function displayLoading() {\n    console.log(\"loading\");\n    let loadingScreen = document.getElementById(\"loadingScreen\");\n    loadingScreen.style.display = \"block\";\n}\n\nexport function removeLoading() {\n    console.log(\"unloading\");\n    let loadingScreen = document.getElementById(\"loadingScreen\");\n    loadingScreen.style.display = \"none\";\n}\n\nexport function displayLose() {\n    console.log(\"Lost\");\n    let loseScreen = document.getElementById(\"loseScreen\");\n    loseScreen.style.display = \"block\";\n}\n\nexport function removeLose() {\n    let loseScreen = document.getElementById(\"loseScreen\");\n    loseScreen.style.display = \"none\";\n}","import \"./componentStyles.css\";\nimport Loader from \"react-loader-spinner\";\nimport React from \"react\";\n\n\nexport const LoadingScreen = () => {\n\n    return (\n        <div id=\"loadingScreen\" className=\"loadingScreen\">\n            <div className=\"loaderHolder\">\n                <Loader\n                    type=\"Circles\"\n                    color=\"rgb(26, 75, 34)\"\n                    height={100}\n                    width={100}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LoadingScreen;","import React from \"react\";\nimport { removeLose } from \"../helperFunctions\"\n\nconst LoseScreen = (props) => {\n\n\n    return (\n        <div id=\"loseScreen\" className=\"loseScreen\">\n            <div className=\"msgHolder\">\n                <h1 className=\"loseMsg\">Congratulations!!!</h1>\n                <h2 className=\"scoreMsg\">You're current best is {props.best}!</h2>\n                <button className=\"restart\" onClick={removeLose}>Restart Game</button>\n            </div>\n        </div>\n    )\n}\n\nexport default LoseScreen;","import \"./componentStyles.css\"\nimport { getCards, shuffle } from \"../cardFunctions.js\";\nimport { checkClicked, fillFalse, displayLoading, removeLoading, displayLose, removeLose } from \"../helperFunctions.js\";\nimport React, { useState, useEffect } from \"react\";\nimport LoadingScreen from \"./LoadingScreen\";\nimport LoseScreen from \"./LoseScreen\";\n\n\nconst CardHolder = (props) => {\n\n  const [pokemon, setPokemon] = useState([]);\n  const [clicked, setClicked] = useState([false, false, false, false]);\n  const [level, setLevel] = useState(0);\n\n  \n  //This useEffect statement should only be called once when the component is mounted (since there are no dependencies)\n  useEffect(() => {\n    if (level === null) {\n      setLevel(0);\n      getCards(4).then(result => shuffle(result)).then(array => setPokemon(array)).then(() => {removeLoading()})\n    }\n    else {\n      getCards(level * 2 + 4).then(result => shuffle(result)).then(array => setPokemon(array)).then(() => {removeLoading()})\n    }\n    \n  }, [level])\n\n  //This useEffect is responsible for setting up event Listeners for on click events on all the pokemon cards (set card to clicked and shuffles)\n  useEffect(() => {\n    for (let i = 0; i < pokemon.length; i++) {\n      let currentCard = document.getElementById(i);\n      currentCard.addEventListener(\"click\",() => {\n        let clickedArray = clicked;\n        if (clickedArray[i] === false) {\n          clickedArray[i] = true;\n          let newScore = props.score + 1;\n          props.setScore(newScore);\n          if (newScore > props.best) {\n            props.setBest(newScore);\n          }\n          console.log(newScore);\n          setClicked(clickedArray);\n          let pokemonArray = pokemon;\n          setPokemon([]);\n          setPokemon(shuffle(pokemonArray));\n          if (checkClicked(clickedArray)) {\n            displayLoading();\n            let newLevel = level + 1;\n            setLevel(newLevel);\n            let length = newLevel * 2 + 4;\n            let newClicked = new Array(length)\n            fillFalse(newClicked);\n            console.log(newClicked);\n            setClicked(newClicked);\n          }    \n        }\n        else {\n          displayLose();\n          setLevel(null);\n          props.setScore(0);\n          setClicked([false, false, false, false]);\n          console.log(0);\n        }\n      });\n    }\n  },\n  [pokemon, clicked])\n\n\n\n  return (\n    <div className=\"cardHolder\">\n      <LoadingScreen />\n      <LoseScreen best={props.best} />\n      {pokemon}\n    </div>\n  );\n}\n\nexport default CardHolder;","import React from \"react\";\n\n\nconst Header = (props) => {\n\n\n    console.log(props);\n    return (\n        <header className=\"header\">\n            <h1 className=\"title\">Pokemon Memory Game</h1>\n            <div className=\"scoreBoard\">\n                <h2 className=\"bestScore\" >{\"Best Score: \" + props.best}</h2>\n                <h2 className=\"currentScore\">{\"Current Score: \" + props.score}</h2>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React, { useState } from \"react\";\nimport CardHolder from \"./components/CardHolder\";\nimport Header from \"./components/Header\";\nimport \"./index.css\";\n\nconst App = () => {\n\n    const [score, setScore] = useState(0);\n    const [best, setBest] = useState(0);\n\n    return (\n        <div className=\"App\">\n            <Header score={score} best={best} />\n            <CardHolder score={score} best={best} setScore={setScore} setBest={setBest} />\n        </div>\n    )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}